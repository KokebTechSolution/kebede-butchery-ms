# Generated by Django 5.2.3 on 2025-07-29 11:43

import django.db.models.deletion
import django.utils.timezone
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('branches', '0002_initial'),
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ItemType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_name', models.CharField(max_length=50, unique=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Item Type',
                'verbose_name_plural': 'Item Types',
                'ordering': ['type_name'],
            },
        ),
        migrations.CreateModel(
            name='ProductUnit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unit_name', models.CharField(help_text="e.g., 'bottle', 'carton', 'liter', 'shot', 'ml', 'piece'", max_length=50, unique=True)),
                ('abbreviation', models.CharField(blank=True, max_length=10, null=True)),
                ('is_liquid_unit', models.BooleanField(default=False, help_text='True if this unit measures liquid volume (e.g., liter, ml, shot, glass)')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Product Unit',
                'verbose_name_plural': 'Product Units',
                'ordering': ['unit_name'],
            },
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('action', models.CharField(help_text="Type of action (e.g., 'restock', 'sale', 'create', 'update')", max_length=50)),
                ('object_id', models.PositiveIntegerField(blank=True, null=True)),
                ('details', models.JSONField(blank=True, default=dict, help_text='JSON payload with detailed changes or transaction data.', null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Audit Log Entry',
                'verbose_name_plural': 'Audit Log Entries',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='BarmanStock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity_in_base_units', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('minimum_threshold_base_units', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('running_out', models.BooleanField(default=False)),
                ('last_stock_update', models.DateTimeField(default=django.utils.timezone.now)),
                ('original_quantity', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('bartender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='barman_inventory', to=settings.AUTH_USER_MODEL)),
                ('branch', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='barman_product_stocks', to='branches.branch')),
                ('original_unit', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='barman_stock_original_unit', to='inventory.productunit')),
            ],
            options={
                'verbose_name': 'Barman Stock',
                'verbose_name_plural': 'Barman Stocks',
                'ordering': ['bartender__username', 'stock__product__name'],
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category_name', models.CharField(max_length=50)),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('item_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='categories', to='inventory.itemtype')),
            ],
            options={
                'verbose_name': 'Product Category',
                'verbose_name_plural': 'Product Categories',
                'ordering': ['item_type__type_name', 'category_name'],
                'unique_together': {('item_type', 'category_name')},
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('base_unit_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('volume_per_base_unit_ml', models.DecimalField(blank=True, decimal_places=2, help_text="For liquids: volume of one 'base_unit' in milliliters. E.g., 750 for a bottle of wine.", max_digits=10, null=True)),
                ('receipt_image', models.ImageField(blank=True, null=True, upload_to='product_receipts/')),
                ('is_active', models.BooleanField(default=True, help_text='Is this product currently available?')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='products', to='inventory.category')),
                ('base_unit', models.ForeignKey(blank=True, help_text="The fundamental unit for this product's inventory tracking and base price (e.g., 'bottle' for Pepsi, 'liter' for Tej).", null=True, on_delete=django.db.models.deletion.PROTECT, related_name='products_as_base_unit', to='inventory.productunit')),
            ],
            options={
                'verbose_name': 'Product',
                'verbose_name_plural': 'Products',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='InventoryRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.DecimalField(decimal_places=2, help_text="Quantity requested in the specified 'request_unit'", max_digits=10)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('rejected', 'Rejected'), ('fulfilled', 'Fulfilled')], default='pending', max_length=10)),
                ('reached_status', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('responded_at', models.DateTimeField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('branch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='incoming_inventory_requests', to='branches.branch')),
                ('requested_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sent_inventory_requests', to=settings.AUTH_USER_MODEL)),
                ('responded_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='responded_inventory_requests', to=settings.AUTH_USER_MODEL)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requests', to='inventory.product')),
                ('request_unit', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='requests_using_unit', to='inventory.productunit')),
            ],
            options={
                'verbose_name': 'Inventory Request',
                'verbose_name_plural': 'Inventory Requests',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Stock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity_in_base_units', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text="Total quantity in the product's base unit (e.g., total bottles, total liters).", max_digits=10)),
                ('minimum_threshold_base_units', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text="Minimum stock level in base units before 'running_out' is flagged.", max_digits=10)),
                ('running_out', models.BooleanField(default=False, help_text='True if stock is below the minimum threshold.')),
                ('last_stock_update', models.DateTimeField(default=django.utils.timezone.now)),
                ('original_quantity', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Original quantity in its original unit (e.g. cartons)', max_digits=10)),
                ('branch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_stocks', to='branches.branch')),
                ('original_unit', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='stock_original_unit', to='inventory.productunit')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='store_stocks', to='inventory.product')),
            ],
            options={
                'verbose_name': 'Main Store Stock',
                'verbose_name_plural': 'Main Store Stocks',
                'ordering': ['branch__name', 'product__name'],
                'unique_together': {('product', 'branch')},
            },
        ),
        migrations.CreateModel(
            name='InventoryTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_type', models.CharField(choices=[('restock', 'Restock (Inbound)'), ('sale', 'Sale (Outbound)'), ('wastage', 'Wastage (Outbound)'), ('store_to_barman', 'Transfer Store to Barman'), ('barman_to_store', 'Transfer Barman to Store'), ('adjustment_in', 'Adjustment In'), ('adjustment_out', 'Adjustment Out')], max_length=20)),
                ('quantity', models.DecimalField(decimal_places=2, help_text="Quantity in the specified 'transaction_unit'", max_digits=10)),
                ('quantity_in_base_units', models.DecimalField(decimal_places=2, default=0.0, help_text="Calculated quantity in the product's base unit. Positive for increases, negative for decreases.", max_digits=10)),
                ('transaction_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('price_at_transaction', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('branch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='branches.branch')),
                ('from_stock_barman', models.ForeignKey(blank=True, help_text='Barman stock affected (source)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='outgoing_transactions_barman', to='inventory.barmanstock')),
                ('initiated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='inventory_transactions', to=settings.AUTH_USER_MODEL)),
                ('to_stock_barman', models.ForeignKey(blank=True, help_text='Barman stock affected (destination)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='incoming_transactions_barman', to='inventory.barmanstock')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transactions', to='inventory.product')),
                ('transaction_unit', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='transactions_using_unit', to='inventory.productunit')),
                ('from_stock_main', models.ForeignKey(blank=True, help_text='Main store stock affected (source)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='outgoing_transactions', to='inventory.stock')),
                ('to_stock_main', models.ForeignKey(blank=True, help_text='Main store stock affected (destination)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='incoming_transactions', to='inventory.stock')),
            ],
            options={
                'verbose_name': 'Inventory Transaction',
                'verbose_name_plural': 'Inventory Transactions',
                'ordering': ['-transaction_date'],
            },
        ),
        migrations.AddField(
            model_name='barmanstock',
            name='stock',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='barman_stocks', to='inventory.stock'),
        ),
        migrations.CreateModel(
            name='ProductMeasurement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount_per', models.DecimalField(decimal_places=4, help_text="How many 'to_unit' are in one 'from_unit' (e.g., 24 for bottles per carton, 20 for shots per bottle)", max_digits=10)),
                ('is_default_sales_unit', models.BooleanField(default=False, help_text='Set as True if this is a primary unit for selling this product.')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='measurements', to='inventory.product')),
                ('from_unit', models.ForeignKey(help_text="The unit from which we are converting (e.g., 'carton', 'bottle')", on_delete=django.db.models.deletion.PROTECT, related_name='conversions_from', to='inventory.productunit')),
                ('to_unit', models.ForeignKey(help_text="The unit to which we are converting (e.g., 'bottle', 'shot', 'ml')", on_delete=django.db.models.deletion.PROTECT, related_name='conversions_to', to='inventory.productunit')),
            ],
            options={
                'verbose_name': 'Product Measurement Conversion',
                'verbose_name_plural': 'Product Measurement Conversions',
                'ordering': ['product__name', 'from_unit__unit_name', 'to_unit__unit_name'],
                'unique_together': {('product', 'from_unit', 'to_unit')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='barmanstock',
            unique_together={('stock', 'bartender')},
        ),
    ]
