# Generated by Django 5.2.4 on 2025-07-24 08:27

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('branches', '0002_initial'),
        ('inventory', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name='auditlog',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='barmanstock',
            name='bartender',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='barman_inventory', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='barmanstock',
            name='branch',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='barman_product_stocks', to='branches.branch'),
        ),
        migrations.AddField(
            model_name='inventoryrequest',
            name='branch',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='incoming_inventory_requests', to='branches.branch'),
        ),
        migrations.AddField(
            model_name='inventoryrequest',
            name='requested_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sent_inventory_requests', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='inventoryrequest',
            name='responded_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='responded_inventory_requests', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='inventorytransaction',
            name='branch',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='branches.branch'),
        ),
        migrations.AddField(
            model_name='inventorytransaction',
            name='from_stock_barman',
            field=models.ForeignKey(blank=True, help_text='Barman stock affected (source)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='outgoing_transactions_barman', to='inventory.barmanstock'),
        ),
        migrations.AddField(
            model_name='inventorytransaction',
            name='initiated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='inventory_transactions', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='inventorytransaction',
            name='to_stock_barman',
            field=models.ForeignKey(blank=True, help_text='Barman stock affected (destination)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='incoming_transactions_barman', to='inventory.barmanstock'),
        ),
        migrations.AddField(
            model_name='category',
            name='item_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='categories', to='inventory.itemtype'),
        ),
        migrations.AddField(
            model_name='product',
            name='category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='products', to='inventory.category'),
        ),
        migrations.AddField(
            model_name='inventorytransaction',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transactions', to='inventory.product'),
        ),
        migrations.AddField(
            model_name='inventoryrequest',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requests', to='inventory.product'),
        ),
        migrations.AddField(
            model_name='productmeasurement',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='measurements', to='inventory.product'),
        ),
        migrations.AddField(
            model_name='productmeasurement',
            name='from_unit',
            field=models.ForeignKey(help_text="The unit from which we are converting (e.g., 'carton', 'bottle')", on_delete=django.db.models.deletion.PROTECT, related_name='conversions_from', to='inventory.productunit'),
        ),
        migrations.AddField(
            model_name='productmeasurement',
            name='to_unit',
            field=models.ForeignKey(help_text="The unit to which we are converting (e.g., 'bottle', 'shot', 'ml')", on_delete=django.db.models.deletion.PROTECT, related_name='conversions_to', to='inventory.productunit'),
        ),
        migrations.AddField(
            model_name='product',
            name='base_unit',
            field=models.ForeignKey(blank=True, help_text="The fundamental unit for this product's inventory tracking and base price (e.g., 'bottle' for Pepsi, 'liter' for Tej).", null=True, on_delete=django.db.models.deletion.PROTECT, related_name='products_as_base_unit', to='inventory.productunit'),
        ),
        migrations.AddField(
            model_name='inventorytransaction',
            name='transaction_unit',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='transactions_using_unit', to='inventory.productunit'),
        ),
        migrations.AddField(
            model_name='inventoryrequest',
            name='request_unit',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='requests_using_unit', to='inventory.productunit'),
        ),
        migrations.AddField(
            model_name='stock',
            name='branch',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_stocks', to='branches.branch'),
        ),
        migrations.AddField(
            model_name='stock',
            name='original_unit',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='stock_original_unit', to='inventory.productunit'),
        ),
        migrations.AddField(
            model_name='stock',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='store_stocks', to='inventory.product'),
        ),
        migrations.AddField(
            model_name='inventorytransaction',
            name='from_stock_main',
            field=models.ForeignKey(blank=True, help_text='Main store stock affected (source)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='outgoing_transactions', to='inventory.stock'),
        ),
        migrations.AddField(
            model_name='inventorytransaction',
            name='to_stock_main',
            field=models.ForeignKey(blank=True, help_text='Main store stock affected (destination)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='incoming_transactions', to='inventory.stock'),
        ),
        migrations.AddField(
            model_name='barmanstock',
            name='stock',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='barman_stocks', to='inventory.stock'),
        ),
        migrations.AlterUniqueTogether(
            name='category',
            unique_together={('item_type', 'category_name')},
        ),
        migrations.AlterUniqueTogether(
            name='productmeasurement',
            unique_together={('product', 'from_unit', 'to_unit')},
        ),
        migrations.AlterUniqueTogether(
            name='stock',
            unique_together={('product', 'branch')},
        ),
        migrations.AlterUniqueTogether(
            name='barmanstock',
            unique_together={('stock', 'bartender')},
        ),
    ]
